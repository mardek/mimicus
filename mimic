#!/usr/bin/env ruby
# Load needed modules
#
require 'vmstat' # dep 
require 'socket'
require 'yaml' # dep
require 'process' # dep
require 'usagewatch' #dep
require 'uname'
require 'sysinfo'

# Default Mimic Configuration file path 
conf="/etc/mimic/mimic.conf"
pid="/var/tmp/mimic.pid"

# The Mimic conf file repo URL
conf_ex="https://github.com/mardek/mimicus/blob/master/conf"

# Some basic conf check
if File.exist?(conf)
	config = YAML.load_file(conf)
else
	puts "Configuration file missing : #{conf}"
	puts "Please fetch a config file examples at #{conf_ex}"
exit
end

# Check if the PID file is still there
if File.exist?(pid)
    puts "mimic agent is alredy running !!!"
    
    oldpidfile = File.open(pid, "r")
    oldpid = oldpidfile.read
    oldpidfile.close
    exit
else
    File.write(pid, Process.pid) # Then write the new PID onto the pid file
end


# We start now !!
begin


# Grab the port number in the configuration file
port = config['port']
srv = config['server']

server = TCPServer.new port 

hostname = Socket.gethostname

puts "mimic agent is running on TCP port: #{port}"
puts "Press Control-C to exit"

def getswap # To replace someday by a native ruby module
    `free | grep Swap | awk -F ' ' '{print "Swap: total="$2", used="$3", free="$4}'`
end

def getio # To replace someday by a native module too !!!
    `iostat | grep -A1  avg-cpu  | sed '/^$/d' | tail -n1| awk -F ' ' '{print "iostat: user="$1", nice="$2", system="$3", iowait="$4", steal="$5", idle="$6}'`
end

def getcpu
    cpuarr = Vmstat.cpu.map { |i| i.to_s }.join("")
    cpuarr = cpuarr.split(">")
    cpuarr = cpuarr.map {|e| e.gsub(/#<struct Vmstat::/,'')}
    cpuarr = cpuarr.map {|e| e.gsub(/Cpu/,'Cpu:')}
end

def getmem
    `free | grep Mem | awk -F ' ' '{print "Memory: total="$2", used="$3", free="$4", shared="$5", Buff/cache="$6", avail="$7}'`
end

def getloadavg
    loadavg = Vmstat.load_average
    loadavg = loadavg.to_s.gsub('#<struct Vmstat::LoadAverage', 'LoadAverage:')
    loadavg = loadavg.to_s.gsub('>', '')
    return loadavg
end

def getdiskpath
    i = `df | egrep -v "tmpfs|nfs"  | awk -F " " '{print $6}' | grep -v Mounted | xargs`
    i = i.split(" ")
 return i
end

def getdisk(d)
    disk = Vmstat.disk(d)
    disk = disk.to_s.gsub('#<struct Vmstat::', '')
    disk = disk.to_s.gsub('>', '')
    return disk
end

def getnics
    `egrep -v "face |Inter-|lo" /proc/net/dev | awk -F ": " '{print $1}'| xargs `#.split(",")
end

def getnicip(nic)
    `ip addr show dev #{nic} | awk -F "inet " '{print $2}' | sed '/^$/d' |  awk -F " " '{print $1}'` 
end

def getnicstat
    nicstats = Vmstat.network_interfaces.map { |i| i.to_s }.join("")
    
    nicstats = nicstats.split(">")
    nicstats = nicstats.map {|e| e.gsub(/#<struct Vmstat::/,'')}
    nicstats = nicstats.map {|e| e.gsub(/Cpu/,'Cpu:')}
    nicstats = nicstats.map {|e| e.gsub(/, type=24/,'')} # We don't need that in the mimic DB
    nicstats = nicstats.map {|e| e.gsub(/, type=nil/,'')} # We don't need that in the mimic DB

    for line in nicstats
        nicstats.delete line if line.include? ":lo,"
        return nicstats
     end
end

def command?(command)
    system("which #{ command} > /dev/null 2>&1")
end

loop do
    sysinfo = SysInfo.new
    client = server.accept    # Wait for a client to connect
    client.puts "Hostname: #{hostname}" 
    client.puts "OS Family: #{sysinfo.os}, type=#{sysinfo.impl}, ruby-version=#{sysinfo.ruby}" 
    client.puts "Uname: #{Uname.invokeUname("-a")}" 
    client.puts "LastBootTime: #{Vmstat.boot_time}, uptime=#{sysinfo.uptime}" 
    client.puts "Localtime: #{Time.now}"  
    client.puts getcpu
    client.puts getloadavg
    if command?("free")
    client.puts getmem  
    else
        client.puts "Memory: OS type is not supported."
    end

    client.puts getswap 
    if command?("iostat")
        client.puts getio
    else
        client.puts "iostat: Package not installed"
    end

    getdiskpath.each do |d|
        client.puts getdisk(d) 
    end

    client.puts getnicstat 
    getnics.split(" ").each do |n|
        if getnicip(n).length != 0
        client.puts "NIC=:#{n}, ipaddr=#{getnicip(n)}"
        else
        client.puts "NIC=:#{n}, ipaddr=nil"
    end
    end
    client.puts "CPU Top: #{Usagewatch.uw_cputop}"
    client.puts "Mem Top: #{Usagewatch.uw_memtop}"

    client.close

    if ARGV[0] == "-d"
    puts "mimic tentacle: #{hostname} check done, sent to #{srv}"
end
end


rescue Interrupt
    puts "\nexiting..."
    File.delete(pid)
rescue Exception => e
    puts e
end
