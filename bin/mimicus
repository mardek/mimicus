#!/usr/bin/env ruby
# Load needed modules
#
#
##
require 'vmstat' # dep 
require 'socket'
require 'yaml' # dep
require 'process' # dep
require 'usagewatch' #dep
require 'uname'
require 'sysinfo'
require 'mimicus'

# Default Mimic Configuration file path 
conf="/etc/mimic/mimic.conf"
pid="/var/tmp/mimic.pid"
#pid="/var/run/mimic.pid"

# The Mimic conf file repo URL
conf_ex="https://github.com/mardek/mimicus/blob/master/conf"

# Some basic conf check
if File.exist?(conf)
	config = YAML.load_file(conf)
else
	puts "Configuration file missing : #{conf}"
	puts "Please fetch a config file examples at #{conf_ex}"
exit
end

# Check if the PID file is still there
if File.exist?(pid)
    puts "mimicus agent is alredy running !!!"
    
    oldpidfile = File.open(pid, "r")
    oldpid = oldpidfile.read
    oldpidfile.close
    exit
else
    File.write(pid, Process.pid) # Then write the new PID onto the pid file
end

# We start now !!
begin

# Grab the port number in the configuration file
port = config['port']
server = config['server']

srv = TCPServer.new port 

hostname = Socket.gethostname

puts "mimicus agent is running on TCP port: #{port}"
puts "Press Control-C to exit"


loop do
    sysinfo = SysInfo.new
    client = srv.accept    # Wait for a client to connect
    client.puts "Hostname: #{hostname}" 
    client.puts "OS Family: #{sysinfo.os}, type=#{sysinfo.impl}, ruby-version=#{sysinfo.ruby}" 
    client.puts "Uname: #{Uname.invokeUname("-a")}" 
    client.puts "LastBootTime: #{Vmstat.boot_time}, uptime=#{sysinfo.uptime}" 
    client.puts "Localtime: #{Time.now}"  
    client.puts Mimicus.getcpu
    client.puts Mimicus.getloadavg
    if Mimicus.command?("free")
    client.puts Mimicus.getmem  
    else
        client.puts "Memory: OS type is not supported."
    end

    client.puts Mimicus.getswap 
    if Mimicus.command?("iostat")
        client.puts Mimicus.getio
    else
        client.puts "iostat: Package not installed"
    end

    Mimicus.getdiskpath.each do |d|
        client.puts Mimicus.getdisk(d) 
    end

    client.puts Mimicus.getnicstat 
    getnics = Mimicus.gentnics
    getnics.split(" ").each do |n|
        if getnicip(n).length != 0
        client.puts "NIC=:#{n}, ipaddr=#{getnicip(n)}"
        else
        client.puts "NIC=:#{n}, ipaddr=nil"
    end
    end
    client.puts "CPU Top: #{Usagewatch.uw_cputop}"
    client.puts "Mem Top: #{Usagewatch.uw_memtop}"

    client.close

    if ARGV[0] == "-d"
    puts "mimic tentacle: #{hostname} check done, sent to #{srv}"
end
end


rescue Interrupt
    puts "\nexiting..."
    File.delete(pid)
rescue Exception => e
    puts e
end
