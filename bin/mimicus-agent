#!/usr/bin/env ruby
# Project Name : Mimicus
# License : GPL3
# Author : martial.ndeko@gmail.com
# homepage : https://github.com/mardek/mimicus 

$PROGRAM_NAME = 'mimicus-agent'

# Load needed modules
require 'mimicus'
require 'socket'
require 'logger' #dep
require 'vmstat' #dep 
require 'yaml' #dep
require 'process' #dep
require 'usagewatch' #dep
require 'sysinfo' #dep

# Default Mimic Configuration file path 
conf="/etc/mimicus/mimicus-agent.conf"

# The Mimic conf file repo URL
conf_ex="https://github.com/mardek/mimicus/blob/master/conf"

if ARGV[0] == nil
    puts "Usage: <start>|<stop>|<status>"
    exit
elsif ARGV[0] == "help"
    puts "Usage: <start>|<stop>|<status>"
    exit
else

# Some basic conf check
if File.exist?(conf)
	config = YAML.load_file(conf) # Load the config file


else
	puts "Configuration file missing : #{conf}"
	puts "Please fetch a config file examples at #{conf_ex}"
    exit
end

# Load the configuration 
port = config['port']
server = config['server']

pidfile = config['pidfile']
logfile = config['logfile']

# We Begin now
if ARGV[0] == "status"  and Mimicus.getpid.to_i != nil 
     
    if File.exist?(pidfile)
    pid = File.read(pidfile) 
        if Mimicus.getpid.to_i == pid.to_i 
            puts "Mimicus agent is running..." 
            exit 1
        end
    else
        puts "Mimicus agent is stopped..." 
        exit 1
    end
end

if ARGV[0] == "stop"  and Mimicus.getpid.to_i != nil 

    # Stop process
    if File.exist?(pidfile) 
        pid = File.read(pidfile) 
        if "#{Process.pid.to_i}" == "#{Mimicus.getpid.to_i}" then
            pid = File.read(pidfile) 
            Process.kill('KILL', pid.to_i)
            
            puts "Mimicus agent stopped..." 
            File.delete(pidfile) # Then write the new PID onto the pid file
            exit 1 

        end
    else
                puts "#{$PROGRAM_NAME} already stopped..."
                exit 1
    end

    pid = File.read(pidfile) 
    Process.kill('KILL', pid.to_i)
    
    puts "Mimicus agent stopped..." 
    File.delete(pidfile) # Then write the new PID onto the pid file
    exit 1 

end

# Start process
if ARGV[0] == "start"

    if "#{Process.pid.to_i}" != "#{Mimicus.getpid.to_i}" then
        puts "Mimicus agent is alredy running !!!"
        exit 1
    else
    
        pid = fork do
    
        srv = TCPServer.new port 
        hostname = Socket.gethostname
        
        puts "Starting Mimicus agent..."
        puts "Mimicus agent is running on TCP port: #{port}"
        File.write(pidfile, Mimicus.getpid.to_i) # Then write the new PID onto the pid file
        
        
            loop do
                sysinfo = SysInfo.new
                client = srv.accept    # Wait for a client to connect
                client.puts "\"Hostname\":\"#{hostname}\"," 
                client.puts "\"OS Family\":\"#{sysinfo.os}\", \"type\":\"#{sysinfo.impl}\", \"ruby-version\":\"#{sysinfo.ruby}\"" 
                client.puts "\"Uname\":\"#{Mimicus.getuname}\"," 
                client.puts "\"LastBootTime\":\"#{Vmstat.boot_time}\", \"uptime\":\"#{sysinfo.uptime}\"," 
                client.puts "\"Localtime\":\"#{Time.now}\","  
                client.puts Mimicus.getcpustats
                client.puts Mimicus.getcpu
                client.puts Mimicus.getloadavg
    
                if Mimicus.command?("free")
                    client.puts Mimicus.getmem  
                else
                    client.puts "Memory: OS type not supported."
                end
            
                client.puts Mimicus.getswap 
                if Mimicus.command?("iostat")
                    client.puts Mimicus.getio
                else
                    client.puts "iostat: Package sysstat not installed"
                end
            
                Mimicus.getdiskpath.each do |d|
                    client.puts Mimicus.getdisk(d) 
                end
            
                nicstat =  Mimicus.getnicstat
                nicstat = nicstat.to_s
                #nicstat = nicstat.gsub(/\=/,'') 
                #nicstat = nicstat.gsub(/,/,'",') 
                nicstat = nicstat.gsub(/\"\,\ /,'') 
                nicstat = nicstat.gsub(/\["/,'') 
                nicstat = nicstat.gsub(/"\]/,'"}') 
                nicstat = nicstat.gsub(/\,\ /,'", "') 

                nicstat = nicstat.gsub("\"\{",'"}, {') 
                nicstat = nicstat.gsub(/\\/,'') 
                nicstat = nicstat.gsub(/\"\=\"/,'=') 
                nicstat = nicstat.gsub(/=/,'":"') 
                #nicstat = nicstat.gsub(/\"\"/,'"="') 
                #nicstat = nicstat.gsub(/},/,'},'"\n")
                #nicstat = nicstat.gsub(/ {/,'{')
                #nicstat = nicstat.gsub(/ }/,'}')

                client.puts nicstat + "},"

                getnics = Mimicus.getnics
                getnics.split(" ").each do |n|
                    if Mimicus.getnicip(n).length != 0
                    client.puts "{\"ifconfig\" : {\"nic\":\"#{n}\", \"ipaddr\":\"#{Mimicus.getnicip(n).chomp}\"}},"
                    else
                    client.puts "{\"ifconfig\" : {\"nic\":\"#{n}\", \"ipaddr\":\"nil\"}},"
                end
                end

                cputop = Mimicus.top("cpu")
                client.puts "{\"cputop\" : #{cputop.chomp(',')}},"
                
                memtop = Mimicus.top("mem")
                client.puts "{\"memtop\" : #{memtop.chomp(',')}}}"

                client.close
            
                log = Logger.new(logfile) 
                log.level = Logger::INFO 
    
                logtrace = "#{Time.now} - Mimic agent : \"#{hostname}\" tentacle check sent to #{server}"
    
                log.debug logtrace 
    
                #if config['logelevel'] ="verbose|VERBOSE" 

                #open(logfile, 'a') do |f|
                #  f.puts logtrace 
                #end
                end

            end
        end
    exit 1 
    else
    puts "Usage: <start>|<stop>|<status>"
    end
end
