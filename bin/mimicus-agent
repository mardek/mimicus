#!/usr/bin/env ruby
# Project Name : MimicusAgent
# License : GPL3
# Author : martial.ndeko@gmail.com
# homepage : https://github.com/mardek/mimicus 

$PROGRAM_NAME = 'mimicus-agent'

# Load needed modules
require 'mimicus'
require 'socket'
require 'logger' #dep
require 'vmstat' #dep 
require 'yaml' #dep
require 'process' #dep
require 'sysinfo' #dep
require "thread"

# Default Mimic Configuration file path 
confpath="/etc/mimicus/"
conf="#{confpath}mimicus-agent.conf"

# The Mimic conf file repo URL
conf_ex="https://github.com/mardek/mimicus/blob/master/conf"

if ARGV[0] == nil
    puts "Usage: <start>|<stop>|<status>"
    exit
elsif ARGV[0] == "help"
    puts "Usage: <start>|<stop>|<status>"
    exit
else

# Some basic conf check
if File.exist?(conf)
	config = YAML.load_file(conf) # Load the config file


else
	puts "Configuration file missing : #{conf}"
	puts "Please fetch a config file example at #{conf_ex}"
    exit
end

# Load the configuration 
port = config['port']
server = config['server']

pidfile = config['pidfile']
logfile = config['logfile']

begin
log = Logger.new(logfile) 
rescue Errno::EACCES
  puts "Log Access denied, you have a permission problem, please change your log path."
  exit 1
     raise
end


# We Begin now
if ARGV[0] == "status"  and MimicusAgent.getpid.to_i != nil 
     
    if File.exist?(pidfile)
    pid = File.read(pidfile) 
        if MimicusAgent.getpid.to_i == pid.to_i 
            puts "Mimicus agent is running..." 
            exit 1
        end
    else
        puts "Mimicus agent is stopped..." 
        exit 1
    end
end

if ARGV[0] == "stop" and MimicusAgent.getpid.to_i != nil 

    # Stop process
    if File.exist?(pidfile) 
        pid = File.read(pidfile) 
        if "#{Process.pid.to_i}" == "#{MimicusAgent.getpid.to_i}" then
            pid = File.read(pidfile) 
            Process.kill('KILL', pid.to_i)
            
            puts "Mimicus agent stopped..." 
            File.delete(pidfile) # Then write the new PID onto the pid file
            exit 1 

        end
    else
                puts "#{$PROGRAM_NAME} already stopped..."
                exit 1
    end

    pid = File.read(pidfile) 
    Process.kill('KILL', pid.to_i)
    
    puts "Mimicus agent stopped..." 
    File.delete(pidfile) # Then write the new PID onto the pid file
    exit 1 

end

# Start process
if ARGV[0] == "start" and MimicusAgent.getpid.to_i != nil 
begin
#srv = TCPServer.new port
end

    if "#{Process.pid.to_i}" != "#{MimicusAgent.getpid.to_i}" then
        puts "Mimicusagent is alredy running !!!"
        exit 1
    else
    
        pid = fork do
    
        srv = TCPServer.new port 
        hostname = Socket.gethostname
        sysinfo = SysInfo.new
        
        puts "Starting Mimicus agent..."
        puts "Mimicus agent is running on TCP port: #{port}"
        File.write(pidfile, MimicusAgent.getpid.to_i) # Then write the new PID onto the pid file
        

            loop do
            client = srv.accept
            puts "Accepted connection from me"

Thread.new do
     begin

                client.puts "{\"hostname\":\"#{hostname}\"," 
                client.puts "\"OS Family\":\"#{sysinfo.os}\", \"type\":\"#{sysinfo.impl}\", \"ruby-version\":\"#{sysinfo.ruby}\"," 
                client.puts "\"uname\":\"#{MimicusAgent.getuname}\"," 
                client.puts "\"lastboot\":\"#{Vmstat.boot_time}\", \"uptime\":\"#{sysinfo.uptime}\"," 
                client.puts "\"localtime\":\"#{Time.now}\","  
                client.puts MimicusAgent.getcpustats
                getcpu = MimicusAgent.getcpu
                for line in getcpu
                    line = line.gsub("=","\":\"") 
                    line = line.gsub(", ","\", \"") 
                    line = line.gsub("{\\","{") 
                    line = line + "\"},"  
                    client.puts line
                end
                client.puts MimicusAgent.getloadavg
    
                if MimicusAgent.command?("free")
                    client.puts MimicusAgent.getmem  
                else
                    client.puts "\"Memory\" : \"OS type not supported\""
                end
            
                client.puts MimicusAgent.getswap 
                if MimicusAgent.command?("iostat")
                    client.puts MimicusAgent.getio
                else
                    client.puts "{\"iostat\": \"Package sysstat not installed\"},"
                end
            
                MimicusAgent.getdiskpath.each do |d|
                    getdisk = MimicusAgent.getdisk(d) 
                    getdisk = getdisk.gsub("\{LinuxDisk type=:","\"LinuxDisk type\"=")
                    getdisk = getdisk.gsub("\"", "")
                    getdisk = getdisk.gsub("=", "\":\"")
                    getdisk = getdisk.gsub(", ", "\", \"")
                    client.puts "\"diskstat\" : \{\"" + getdisk + "\"\},"
                end
            
                nicstat =  MimicusAgent.getnicstat
                nicstat = nicstat.to_s

                nicstat = nicstat.gsub('["ifstat\" : {\"nic\":\"','"ifstat" : {"nic":"') 
                nicstat = nicstat.gsub(', "ifstat\" : ',"\n\"ifstat\" : ") 
                nicstat = nicstat.gsub('{\"nic\":\"','{"nic":"') 
                nicstat = nicstat.gsub(', in_bytes=','", "in_bytes"="') 
                nicstat = nicstat.gsub(', in_errors=','", "in_errors"="') 
                nicstat = nicstat.gsub(', in_drops=','", "in_drops"="') 
                nicstat = nicstat.gsub(', out_bytes=','", "out_bytes"="') 
                nicstat = nicstat.gsub(', out_errors=','", "out_errors"="') 
                nicstat = nicstat.gsub("=",":") 
                nicstat = nicstat.gsub("]","") 

                for line in nicstat.split("\n")
                    line = line + "}," 
                    client.puts line unless line =~ /\"lo\"/ 
                end

                getnics = MimicusAgent.getnics

                getnics.split(" ").each do |n|
                    if MimicusAgent.getnicip(n).length != 0
                    client.puts "\"ifconfig\" : {\"nic\":\"#{n}\", \"ipaddr\":\"#{MimicusAgent.getnicip(n).chomp}\"},"
                    else
                    client.puts "\"ifconfig\" : {\"nic\":\"#{n}\", \"ipaddr\":\"nil\"},"
                end
                end

                cputop = MimicusAgent.top("cpu")
                client.puts "\"cputop\" : [#{cputop.chomp(',')}],"
                
                memtop = MimicusAgent.top("mem")
                client.puts "\"memtop\" : [#{memtop.chomp(',')}]}"

                client.close
            
                
                log.level = Logger::INFO 
    
                logtrace = "#{Time.now} - Mimic agent : \"#{hostname}\" tentacle check sent to #{server}"
    
                log.debug logtrace 
    

            end

    end
    exit 1 
    puts "Usage: <start>|<stop>|<status>"
   end

end
end
end
